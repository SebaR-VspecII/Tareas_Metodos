# -*- coding: utf-8 -*-
"""Tarea 6.8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W5A6YBHPA-OSjGUcMlsAQ2S3neb4ti5w
"""

import numpy as np
from scipy.interpolate import lagrange

# ==============================
# Parte 1: Primero veremos la primera parte del enunciado entre x = 0 y x = 2
# ==============================

media = 0
varianza = 1

def gaussiana(x):
  return np.exp(-((x-media)**2) / (2*varianza**2))

# Puntos para la interpolacion

x_ptos = np.linspace(0, 2, 10) # 10 puntos separados
y_ptos = gaussiana(x_ptos)

# El polinomio para nuestra interpolacion de lagrange
polinomio = lagrange(x_ptos, y_ptos)

# Ahora se evalua dentro del intervalo establecido
x_eval = np.linspace(0, 2, 5)
print("=== Parte 1: Aproximacion en [0, 2] ===")
for x in x_eval:
  print(f"x = {x:.2f} | f(x) real = {gaussiana(x):.8f} | f(x) aprox = {polinomio(x):.8f}")

print("\nEl polinomio interpolante de Lagrange reproduce muy bien la gaussiana dentro del intervalo [0, 2].")


# ==============================
# Parte 2: Pregunta
# ==============================

prueb_x = 3
f_real = gaussiana(prueb_x)
f_aprox = polinomio(prueb_x)
error_relativo = np.abs((f_real - f_aprox) / f_real)

print("\n=== Parte 2: Aproximacion en x = 3 ===")
print(f"Valor real f({prueb_x}) = {f_real:.6f}")
print(f"Valor aproximado f({prueb_x}) = {f_aprox:.6f}")
print(f"Error relativo = {error_relativo:.6f}")

# Argumentacion Teorica
print("\nArgumento:")
print("Dentro del intervalo [0, 2], el polinomia se aproxima bien a la funcion. Pero en x = 3, siendo fuera del rango de interpolacion, el error crece demasiado.")
print("Esto ocurre porque los polinomios de Lagrange solo son precisos dentro del intervalo de los puntos usados; fuera de el, la extrapolacion produce oscilaciones y errores muy grandes.")
print("Por lo tanto, no se puede usar el mismo polinomio para aproximar la gaussiana en x = 3.")

# Nota: 7.0
