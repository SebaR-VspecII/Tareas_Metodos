# -*- coding: utf-8 -*-
"""Tarea 3.1 Métodos (Sebastián R).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W5A6YBHPA-OSjGUcMlsAQ2S3neb4ti5w
"""

import random
import numpy as np

# Tomamos el ejemplo de la urna con 23 bolas
# Donde hay 8 blancas, 6 azules y 9 rojas
# Creamos la lista completa de bolas

def unir(color, numeros):
  return {color + numero for numero in numeros}

urna = list(unir('B', '12345678') | unir('A', '123456') | unir('R', '123456789'))

# ¿Cuál es la probabilidad de que entre las tres primeras no haya ninguna roja?
# Ahora definiré la función que verá si las 3 primeras bolas no son rojas
# Le pondré "bola", ya que cada color va con un numero = bolas distintas

def ninguna_roja_de_tres_primeras(muestra):
  return all(bola[0] != 'R' for bola in muestra[:3])

# N sera el numero de simulaciones

N = 100000

# Generamos N muestras aleatorias de 6 bolas sin reemplazo
muestras = [tuple(random.sample(urna, 6)) for _ in range(N)]
# Filtramos aquellas muestras que cumplen la condición: ninguna roja en las 3 primeras
casos_ninguna_roja = [e for e in muestras if ninguna_roja_de_tres_primeras(e)]
# Calculamos la probabilidad como casos favorables / total de simulaciones
p_ninguna_roja = len(casos_ninguna_roja) / N

print('La probabilidad de que ninguna de las tres primeras bolas extraidas sea roja es de:', p_ninguna_roja)


# ¿Cuál es la probabilidad de sacar dos bolas de cada color?
# Al igual que en lo anterior defino la función. Esta funcioe nme revisa si sacos 2 bolas del mismo color

def dos_de_cada_color(muestra):
  colores = [bola[0] for bola in muestra]
  return colores.count('B') == 2 and colores.count('A') == 2 and colores.count('R') == 2

# Generamos nuevamente N muestras aleatorias de 6 bolas sin reemplazo
muestras = [tuple(random.sample(urna, 6)) for _ in range(N)]
# Filtramos aquellas muestras que cumplen la condición: 2 bolas de cada color
casos_dos_de_cada_color = [e for e in muestras if dos_de_cada_color(e)]
# Calculamos la probabilidad como casos favorables / total de simulaciones
p_dos_de_cada_color = len(casos_dos_de_cada_color) / N

print('La probabilidad de sacar dos bolas del mismo color es de:', p_dos_de_cada_color)

# Nota: 7.0
# Dado el tamaño pequeño de la muestra, era más
# preciso simular todos los casos en vez de
# hacer una muestra aleatoria.
