# -*- coding: utf-8 -*-
"""Tarea 4.9

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sao0WGDiqkeMO3zbCUCzukGn6Mn5wb1b
"""

import numpy as np
from scipy.special import erf

# Ahora definimos parámetros

N = 20 # N siendo la cantidad de números que vamos a extraer para posterior sumar.

media = N * 0.5 # Vendría siendo la media de nuestra suma.

desv = np.sqrt(N/12) # Nuestra varianza es de 1/12, por lo que ahora podemos definir nuestra desviación estandar.

# Ahora sigamos con el metodo de Monte Carlo.

M = 10**6 # Corresponderá a nustro número de simulaciones, siendo muchas para así tener una buena precisión o acercamiento.
sums = np.sum(np.random.rand(M, N), axis = 1)

# Haré el código con matrices y vectorizado, puesto que por lo que entiendo numpy hace el trabajo mucho más rápido de esta forma. Esto es ideal para el número de simulaciones que quiero hacer.

prob_MC_sumas_9_10 = np.mean((sums >= 9) & (sums <=10))
prob_MC_sumas_15_16 = np.mean((sums >=15) & (sums <=16))

# Con esto podemos calcular las probabilidades de que nuestras sumas estén entre 9 y 10, como también entre 15 y 16. Esto mediante generaremos un medidor de verdadero o falso y con ello calcular mediante una fraccíon las veces que nuestra condición verdadera se cumple.

# Ahora estimaremos el error, esto lo haré con la desviación estandar de una variable de Bernoulli con cierta probabilidad que luego es dividida por el número de nuestras muestras. Así obtener un intervalo de confianza de error de nuestra simulación.

error_sumas_9_10 = np.sqrt(prob_MC_sumas_9_10*(1 - prob_MC_sumas_9_10)/M)
error_sumas_15_16 = np.sqrt(prob_MC_sumas_15_16*(1 - prob_MC_sumas_15_16)/M)

# Ahora iré con las probabilidades usando la función de error erf (relacionada con la normal estándar)

def prob_gauss(a, b, media, desv):
    return 0.5 * (erf((b - media)/(np.sqrt(2)*desv)) - erf((a - media)/(np.sqrt(2)*desv)))

prob_TCL_sumas_9_10 = prob_gauss(9, 10, media, desv)
prob_TCL_sumas_15_16 = prob_gauss(15, 16, media, desv)

# Con esto calculamos la probabilidad acumuladad de nuestra normal

error_relatv_sumas_9_10 = abs(prob_MC_sumas_9_10 - prob_TCL_sumas_9_10) / prob_TCL_sumas_9_10
error_relatv_sumas_15_16 = abs(prob_MC_sumas_15_16 - prob_TCL_sumas_15_16) / prob_TCL_sumas_15_16

# Con esto medimos que tan diferente fue la simulacion MC de la aprox Gaussiana en en %

# Finalmente mostramos los resultados

print("Monte Carlo:")
print(f"Probabildad de que la suma esté entre 9 y 10  = {prob_MC_sumas_9_10:.6f} ± {error_sumas_9_10:.6f}")
print(f"Probabildad de que la suma esté entre 15 y 16 = {prob_MC_sumas_15_16:.6f} ± {error_sumas_15_16:.6f}")

print("\nTeorema Central del Límite:")
print(f"Probabildad de que la suma esté entre 9 y 10  = {prob_TCL_sumas_9_10:.6f}")
print(f"Probabildad de que la suma esté entre 15 y 16 = {prob_TCL_sumas_15_16:.6f}")

print("\nErrores relativos:")
print(f"Intervalo [9,10]: {error_relatv_sumas_9_10:.2%}")
print(f"Intervalo [15,16]: {error_relatv_sumas_15_16:.2%}")

print("\nComentario:")
print("La simulación Monte Carlo concuerda bien con la aproximación gaussiana, especialmente en el intervalo [9,10].")
print("En el intervalo [15,16], la probabilidad es mucho menor, lo que puede aumentar el error relativo.")

# Nota: 6.5
# Faltó indagar sobre el por qué de la diferencia en los intervalos
